import groovy.json.JsonOutput
TOP_JOB_DESC = "Builds:\\n"
def curlStatus(String message, String state, String context, String sha, String url) {

  withCredentials([string(credentialsId: JENKINS_CREDENTIAL_ID, variable: 'SECRET')]) {
    def json = JsonOutput.toJson([state: "${state}", context: "${context}", target_url: "${url}", description:"${message}"])
    httpRequest(customHeaders: [[maskValue: false, name: 'Accept', value: 'application/vnd.github.v3+json'], [maskValue: false, name: 'Authorization', value: "token "+SECRET]], 
        httpMode: 'POST',
        requestBody: "${json}", 
        responseHandle: 'NONE',
        url: "${GITHUB_API_STATUS_URL}${sha}",
        wrapAsMultipart: false,
        quiet: true,
        consoleLogResponseBody: false)
  }

}

String buildJob(String ghcontext, String jobName) {
        
        if (currentBuild.description == null) {
            currentBuild.description = "Builds:<br>"
        }
  
        curlStatus('Building', 'pending', ghcontext, ghprbActualCommit, "")
  
        currentBuild.displayName = "PR: #${ghprbPullId} - Build: #${BUILD_NUMBER}"
        def jobBuild = build job: jobName, propagate: false, parameters: [string(name: 'SHA1', value: ghprbActualCommit), string(name: 'GITHUB_URL', value: GITHUB_URL), string(name: 'GITHUB_PR_NUMBER', value: ghprbPullId), string(name:'GITHUB_PR_TARGET_BRANCH', value: ghprbTargetBranch)]
        def jobURL = jobBuild.getAbsoluteUrl()
        currentBuild.description += " ${jobName} - <a href=${jobURL}>${jobURL}</a> <br>"

        def jobResult = jobBuild.getResult()

        echo "Build of '${jobName}' returned result: ${jobResult}"

        if (jobResult == 'SUCCESS') {
                    curlStatus('Success', 'success', ghcontext, ghprbActualCommit, jobURL)
        } else {
                    curlStatus('Failure', 'failure', ghcontext, ghprbActualCommit, jobURL)
        }
        return jobResult
}

pipeline {
    agent none
    
    stages {
        stage('Quick Checks') {
            parallel {
                stage('Clang-Format') {
                    when {
                        anyOf {
                            environment name: 'ghprbCommentBody', value: '[approve ci]'
                            expression { ghprbCommentBody ==~ /.*clang-format.*/ }
                        }
                    }
                    steps {
                        script {
                            result = buildJob('Clang-Format', 'Github_Builds/clang-format-test')
                            if (result == 'FAILURE') {
                                error('Clang-Format failed')
                            }
                        }
                    }
                }
                stage('RAT') {
                    when {
                        anyOf {
                            environment name: 'ghprbCommentBody', value: '[approve ci]'
                            expression { ghprbCommentBody ==~ /.*RAT.*/ }
                        }
                    }
                    steps {
                        script {
                            result = buildJob('RAT', 'Github_Builds/rat')
                            if (result == 'FAILURE') {
                                error('RAT failed')
                            }
                        }
                    }
                }
                stage('Docs') {
                    when {
                        anyOf {
                            environment name: 'ghprbCommentBody', value: '[approve ci]'
                            expression { ghprbCommentBody ==~ /.*docs.*/ }
                        }
                    }
                    steps {
                        script {
                            result = buildJob('Docs', 'Github_Builds/docs')
                            if (result == 'FAILURE') {
                                error('Docs failed')
                            }
                        }
                    }
                }                
            }
        }
        
 
        stage('Build and Test') {
            parallel {
                stage('Ubuntu Build') {
                    when {
                        anyOf {
                            environment name: 'ghprbCommentBody', value: '[approve ci]'
                            expression { ghprbCommentBody ==~ /.*ubuntu.*/ }
                        }
                    }
                    steps {
                        script {
                            result = buildJob('Ubuntu', 'Github_Builds/ubuntu')
                            if (result == 'FAILURE') {
                                error('Ubuntu build failed')
                            }
                        }
                    }
                }
                stage('Fedora Build') {
                    when {
                        anyOf {
                            environment name: 'ghprbCommentBody', value: '[approve ci]'
                            expression { ghprbCommentBody ==~ /.*fedora.*/ }
                        }
                    }                    
                    steps {
                        script {
                            result = buildJob('Fedora', 'Github_Builds/fedora')
                            if (result == 'FAILURE') {
                                error('Fedora build failed')
                            }
                        }
                    }
                }
                stage('Debian Build') {
                    when {
                        anyOf {
                            environment name: 'ghprbCommentBody', value: '[approve ci]'
                            expression { ghprbCommentBody ==~ /.*debian.*/ }
                        }
                    }                    
                    steps {
                        script {
                            result = buildJob('Debian', 'Github_Builds/debian')
                            if (result == 'FAILURE') {
                                error('Debian build failed')
                            }
                            result = 'SUCCESS'
                        }
                    }
                }

                stage('CentOS Build') {
                    when {
                        anyOf {
                            environment name: 'ghprbCommentBody', value: '[approve ci]'
                            expression { ghprbCommentBody ==~ /.*centos.*/ }
                        }
                    }                    
                    steps {
                        script {
                            result = buildJob('CentOS', 'Github_Builds/centos')
                            if (result == 'FAILURE') {
                                error('CentOS build failed')
                            }
                        }
                    }
                }

                stage('Rocky Build') {
                    when {
                        anyOf {
                            environment name: 'ghprbCommentBody', value: '[approve ci]'
                            expression { ghprbCommentBody ==~ /.*rocky.*/ }
                        }
                    }                    
                    steps {
                        script {
                            result = buildJob('Rocky', 'Github_Builds/rocky')
                            if (result == 'FAILURE') {
                                error('Rocky build failed')
                            }
                        }
                    }
                }

                //stage('FreeBSD Build') {
                //    when {
                //        anyOf {
                //            environment name: 'ghprbCommentBody', value: '[approve ci]'
                //            expression { ghprbCommentBody ==~ /.*freebsd.*/ }
                //        }
                //    }                    
                //    steps {
                //        script {
                //            result = buildJob('FreeBSD', 'Github_Builds/freebsd')
                //            if (result == 'FAILURE') {
                //                error('FreeBSD build failed')
                //            }
                //        }
                //   }
                //}                

                stage('Clang-Analyzer') {
                    when {
                        anyOf {
                            environment name: 'ghprbCommentBody', value: '[approve ci]'
                            expression { ghprbCommentBody ==~ /.*clang-analyzer.*/ }
                        }
                    }                    
                    steps {
                        script {
                            result = buildJob('Clang-Analyzer', 'Github_Builds/clang-analyzer')
                            if (result == 'FAILURE') {
                                error('Clang-Analyzer failed')
                            }
                        }
                    }
                }
                stage('AuTest') {
                    when {
                        anyOf {
                            environment name: 'ghprbCommentBody', value: '[approve ci]'
                            expression { ghprbCommentBody ==~ /.*autest.*/ }
                        }
                    }
                    steps {
                        script {
                            result = buildJob('AuTest', 'Github_Builds/autest')
                            if (result == 'FAILURE') {
                                error('AuTest failed')
                            }
                        }
                    }
                }
            } // parallel for "Build and Test"
        } // End Stage("Build and Test")
    } // End Stages
}
