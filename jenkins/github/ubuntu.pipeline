pipeline {
    agent {
        docker {
            image 'ci.trafficserver.apache.org/ats/ubuntu:20.04'
            registryUrl 'https://ci.trafficserver.apache.org/'
            label 'docker'
            args '-v ${HOME}/ccache:/tmp/ccache:rw'
        }
    }
    environment {
        CCACHE_DIR = "/tmp/ccache"
        CCACHE_BASEDIR = "${WORKSPACE}"
    }
    stages {
        stage('Clone') {
            steps {
                dir('src') {
                    echo "${sha1}"
                    checkout([$class: 'GitSCM',
                        branches: [[name: sha1]],
                        extensions: [
                            // We have to set an idenity for the merge step because Git requires
                            // the user.name and user.email to be set to do a merge.
                            [$class: "UserIdentity",
                                name: "ATS CI User",
                                email: "noreply@trafficserver.apache.org"
                            ],
                            [$class: "PreBuildMerge",
                                options: [
                                    mergeTarget: "${GITHUB_PR_TARGET_BRANCH}",
                                    fastForwardMode: "NO_FF",
                                    mergeRemote: "origin",
                                    mergeStrategy: "DEFAULT"
                                ]
                            ],
                        ],
                        userRemoteConfigs: [[url: github_url, refspec: '+refs/pull/*:refs/remotes/origin/pr/*']]])
                    sh '''#!/bin/bash
                            set -x

                            echo
                            echo
                            uname -a
                            cat /etc/*release*

                            echo
                            git show HEAD^2 --no-patch
                            git show HEAD^1 --no-patch
                            echo

                            git show -n 10 --decorate --graph --oneline --no-patch
                            echo
                            echo
                    '''
                }
                echo 'Finished Cloning'
            }
        }
        stage('Build') {
            steps {
                echo 'Starting build'
                dir('src') {
                    sh '''#!/bin/bash

                        set -x
                        set -e

                        if [ -d cmake ]
                        then
                            # Ensure that we pick up clang-12.
                            export PATH=/opt/bin:/usr/lib/llvm-12/bin:$PATH

                            export CC="clang"
                            export CXX="clang++"

                            cmake -B build --preset ci-ubuntu
                            cmake --build build -v
                            cmake --install build
                            pushd build
                            ctest -j4 --output-on-failure --no-compress-output -T Test
                            /tmp/ats/bin/traffic_server -K -k -R 1
                            popd
                        else
                            # Pre 10.x branches only support autotools.

                            # We don't use c++20 features yet, but we want to make
                            # sure we can build with the flag set.
                            export CXXSTD=20

                            autoreconf -fiv
                            mkdir out_of_source_build_dir
                            cd out_of_source_build_dir
                            CC="clang" CXX="clang++" ../configure --enable-experimental-plugins --enable-example-plugins --enable-expensive-tests --prefix=/tmp/ats/ --enable-werror --enable-ccache
                            make -j4 V=1 Q=
                            make -j4 check VERBOSE=Y V=1
                            make install
                            /tmp/ats/bin/traffic_server -K -k -R 1
                        fi
                    '''
                }
            }
        }
    }

    post {
        cleanup {
            cleanWs()
        }
    }
}
