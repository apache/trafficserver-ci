pipeline {
    agent {
        docker {
            image 'ci.trafficserver.apache.org/ats/rockylinux:8'
            registryUrl 'https://ci.trafficserver.apache.org/'
            label 'docker'
            // We need host networking for clang-format to download
            args '--network host'
        }
    }
    stages {
        stage('Clone') {
            steps {
                dir('src') {
                    echo "${sha1}"
                    checkout([$class: 'GitSCM',
                        branches: [[name: sha1]],
                        extensions: [
                            // We have to set an idenity for the merge step because Git requires
                            // the user.name and user.email to be set to do a merge.
                            [$class: "UserIdentity",
                                name: "ATS CI User",
                                email: "noreply@trafficserver.apache.org"
                            ],
                            [$class: "PreBuildMerge",
                                options: [
                                    mergeTarget: "${GITHUB_PR_TARGET_BRANCH}",
                                    fastForwardMode: "NO_FF",
                                    mergeRemote: "origin",
                                    mergeStrategy: "DEFAULT"
                                ]
                            ],
                        ],
                        userRemoteConfigs: [[url: github_url, refspec: '+refs/pull/*:refs/remotes/origin/pr/*']]])
                    sh '''#!/bin/bash
                            set -x

                            echo
                            echo
                            uname -a
                            cat /etc/*release*

                            echo
                            git show HEAD^2 --no-patch
                            git show HEAD^1 --no-patch
                            echo

                            git show -n 10 --decorate --graph --oneline --no-patch
                            echo
                            echo
                    '''
                }
                echo 'Finished Cloning'
            }
        }
        stage('Build') {
            steps {
                echo 'Starting build'
                dir('src') {
                    sh '''#!/bin/bash
                        set -x
                        set -e

                        if [ -d cmake ]
                        then
                            cmake -B build
                            cmake --build build --target rat | tee RAT.txt
                        else
                            # Pre 10.x branches only support autotools.
                            autoreconf -if && ./configure
                            rm -f lib/ts/stamp-h1

                            # Run RAT
                            make rat | tee RAT.txt
                        fi

                        # Mark as failed if there are any unknown licenses
                        grep '^0 Unknown Licenses' RAT.txt > /dev/null || exit -1

                        exit 0
                    '''
                }
            }
        }
    }

    post {
        cleanup {
            cleanWs()
        }
    }
}
