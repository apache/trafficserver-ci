pipeline {
    agent {
        docker {
            image 'ci.trafficserver.apache.org/ats/fedora:38'
            registryUrl 'https://ci.trafficserver.apache.org/'
            label 'docker'
            args '-v ${HOME}/ccache:/tmp/ccache:rw'
        }
    }
    environment {
        CCACHE_DIR = "/tmp/ccache"
        CCACHE_BASEDIR = "${WORKSPACE}"
    }
    stages {
        stage('Clone') {
            steps {
                dir('src') {
                    echo "${sha1}"
                    checkout([$class: 'GitSCM',
                        branches: [[name: sha1]],
                        extensions: [
                            // We have to set an idenity for the merge step because Git requires
                            // the user.name and user.email to be set to do a merge.
                            [$class: "UserIdentity",
                                name: "ATS CI User",
                                email: "noreply@trafficserver.apache.org"
                            ],
                            [$class: "PreBuildMerge",
                                options: [
                                    mergeTarget: "${GITHUB_PR_TARGET_BRANCH}",
                                    fastForwardMode: "NO_FF",
                                    mergeRemote: "origin",
                                    mergeStrategy: "DEFAULT"
                                ]
                            ],
                        ],
                        userRemoteConfigs: [[url: github_url, refspec: '+refs/pull/*:refs/remotes/origin/pr/*']]])
                    sh 'git show -n 10 --decorate --graph --oneline --no-patch'
                }
                echo 'Finished Cloning'
            }
        }
        stage('Build: cmake') {
            steps {
                echo 'Starting cmake build'
                dir('src') {
                    sh '''#!/bin/bash
                        set -x
                        set -e

                        if [ ! -d cmake ]
                        then
                            echo "CMake builds are not supported for this branch."
                            echo "No need to test it to show that it fails."
                            exit 0
                        fi


                        export PATH=/opt/bin:${PATH}

                        cmake -B cmake-build-release -GNinja -DCMAKE_COMPILE_WARNING_AS_ERROR=ON -DCMAKE_BUILD_TYPE=Debug -DBUILD_EXPERIMENTAL_PLUGINS=ON -DOPENSSL_ROOT_DIR=/opt/openssl-quic -DCMAKE_INSTALL_PREFIX=/tmp/ats
                        cmake --build cmake-build-release -v
                        cmake --install cmake-build-release
                        pushd cmake-build-release
                        ctest -j4 --output-on-failure --no-compress-output -T Test
                        /tmp/ats/bin/traffic_server -K -k -R 1
                        popd

                        cmake -B cmake-build-quiche -GNinja -DCMAKE_COMPILE_WARNING_AS_ERROR=ON -DENABLE_QUICHE=ON -DCMAKE_BUILD_TYPE=Release -DBUILD_EXPERIMENTAL_PLUGINS=ON -Dquiche_ROOT=/opt/quiche -DOPENSSL_ROOT_DIR=/opt/boringssl -DCMAKE_INSTALL_PREFIX=/tmp/ats_quiche
                        cmake --build cmake-build-quiche -v
                        cmake --install cmake-build-quiche
                        pushd cmake-build-quiche
                        ctest -j4 --output-on-failure --no-compress-output -T Test
                        /tmp/ats_quiche/bin/traffic_server -K -k -R 1
                        popd

                        '''
                }
                echo 'Finished cmake build'
            }
        }
    }

    post {
        cleanup {
            cleanWs()
        }
    }
}
