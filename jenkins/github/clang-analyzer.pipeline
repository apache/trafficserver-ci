pipeline {
    agent {
        docker {
            image 'ci.trafficserver.apache.org/ats/ubuntu:22.04'
            registryUrl 'https://ci.trafficserver.apache.org/'
            args '-v /home/rooter/clang-analyzer:/tmp/clang-analyzer:rw'
            label 'docker'
        }
    }
    stages {
        stage('Clone') {
            steps {
                dir('src') {
                    echo "${sha1}"
                    checkout([$class: 'GitSCM',
                        branches: [[name: sha1]],
                        extensions: [
                            // We have to set an idenity for the merge step because Git requires
                            // the user.name and user.email to be set to do a merge.
                            [$class: "UserIdentity",
                                name: "ATS CI User",
                                email: "noreply@trafficserver.apache.org"
                            ],
                            [$class: "PreBuildMerge",
                                options: [
                                    mergeTarget: "${GITHUB_PR_TARGET_BRANCH}",
                                    fastForwardMode: "NO_FF",
                                    mergeRemote: "origin",
                                    mergeStrategy: "DEFAULT"
                                ]
                            ],
                        ],
                        userRemoteConfigs: [[url: github_url, refspec: '+refs/pull/*:refs/remotes/origin/pr/*']]])
                    sh '''#!/bin/bash
                            set -x

                            echo
                            echo
                            uname -a
                            cat /etc/*release*

                            echo
                            git show HEAD^2 --no-patch
                            git show HEAD^1 --no-patch
                            echo

                            git show -n 10 --decorate --graph --oneline --no-patch
                            echo
                            echo
                    '''
                }
                echo 'Finished Cloning'
            }
        }
        stage('Build') {
            steps {
                echo 'Starting build'
                dir('src') {
                    sh '''#!/bin/bash
                        set -x
                        set -e

                        if [ -d cmake ]
                        then
                            cmake -B build --preset ci-clang-analyzer
                            cmake --build build -v

                            analyze-build-14 \
                                --cdb build/compile_commands.json \
                                -v \
                                --status-bugs \
                                --keep-empty \
                                -enable-checker alpha.unix.cstring.BufferOverlap \
                                -enable-checker alpha.core.BoolAssignment \
                                -enable-checker alpha.core.CastSize \
                                -enable-checker alpha.core.SizeofPtr \
                                -o ${WORKSPACE}/output/${GITHUB_PR_NUMBER} \
                                --html-title="clang-analyzer: ${GITHUB_PR_NUMBER}"
                        else
                            echo "CMake builds are not supported for the this branch."
                            echo "Falling back to autotools."
                            autoreconf -fiv
                            scan-build-14 --keep-cc ./configure --enable-experimental-plugins --with-luajit
                            make -j4 -C lib all-local V=1 Q=
                            scan-build-14 --keep-cc -enable-checker alpha.unix.cstring.BufferOverlap -enable-checker \
                                alpha.core.BoolAssignment -enable-checker alpha.core.CastSize -enable-checker alpha.core.SizeofPtr \
                                --status-bugs --keep-empty \
                                -o ${WORKSPACE}/output/${GITHUB_PR_NUMBER} --html-title="clang-analyzer: ${GITHUB_PR_NUMBER}" \
                                make -j3 V=1 Q=
                            make -j4
                        fi

                        # The above will have a non-zero exit if it finds problems. Thus,
                        # because of `set -e`, if we get here the report was clean.
                        touch "${WORKSPACE}/output/No Errors Reported"
                    '''
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'output/**/*', fingerprint: true, allowEmptyArchive: true
        }
        cleanup {
            cleanWs()
        }
    }
}
