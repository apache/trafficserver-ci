pipeline {
    agent {
        docker {
            image 'ats/fedora:35'
            //registryUrl 'https://ci.trafficserver.apache.org/'
            args '-v ${HOME}/ccache:/tmp/ccache:rw'
            label 'linux'
        }
    }
    environment {
        CCACHE_DIR = "/tmp/ccache"
        CCACHE_BASEDIR = "${WORKSPACE}"
    }
    stages {
        stage('Clone') {
            steps {
                dir('src') {
                    echo "${sha1}"
                    checkout([$class: 'GitSCM',
                        branches: [[name: sha1]],
                        extensions: [
                            // We have to set an idenity for the merge step because Git requires
                            // the user.name and user.email to be set to do a merge.
                            [$class: "UserIdentity",
                                name: "ATS CI User",
                                email: "noreply@trafficserver.apache.org"
                            ],
                            [$class: "PreBuildMerge",
                                options: [
                                    mergeTarget: "${GITHUB_PR_TARGET_BRANCH}",
                                    fastForwardMode: "NO_FF",
                                    mergeRemote: "origin",
                                    mergeStrategy: "DEFAULT"
                                ]
                            ],
                        ],
                        userRemoteConfigs: [[url: github_url, refspec: '+refs/pull/*:refs/remotes/origin/pr/*']]])
                    sh 'git show -n 10 --decorate --graph --oneline --no-patch'
                }
                echo 'Finished Cloning'
            }
        }
        stage('Build') {
            steps {
                echo 'Starting build'
                dir('src') {
                    // For Jenkins debugging. We comit to the top of README in our debug PRs.
                    sh('head README')

                    sh '''#!/bin/bash
                        set -x
                        set -e

                        autoreconf_succeeded=0
                        for i in {1..5}
                        do
                          if CONFIG_SHELL=/bin/bash autoreconf -fiv
                          then
                            autoreconf_succeeded=1
                            break
                          fi
                          sleep 2
                          echo "autoreconf failed attempt ${i}/5"
                        done

                        if [ ${autoreconf_succeeded} -eq 0 ]
                        then
                          echo "Failed to run autoreconf. Exiting with an error."
                          exit 1
                        fi

                        # Remove the --with-openssl argument when we support OpenSSL 3.x.
                        ./configure --with-openssl=/opt/openssl-quic --enable-experimental-plugins --enable-example-plugins --prefix=/tmp/ats/ --enable-werror --enable-debug --enable-wccp --enable-luajit --enable-ccache
                        make -j4 V=1 Q=
                        make -j 2 check VERBOSE=Y V=1
                        make install
                        /tmp/ats/bin/traffic_server -K -k -R 1
                    '''
                }
            }
        }
    }
    post {
        cleanup {
            cleanWs()
        }
    }
}
