pipeline {
	agent {
		docker {
			registryUrl 'https://controller.trafficserver.org/'
			image 'controller.trafficserver.org/ats/centos:8'
			args '--init --cap-add=SYS_PTRACE --network=host -u root -v ${HOME}/ccache:/tmp/ccache:rw'
			label 'docker'
		}
	}
	environment {
		CCACHE_DIR = "/tmp/ccache"
	}

	stages {
		stage('Initialization') {
			steps {
				script {
					currentBuild.displayName = "#${BUILD_NUMBER} ${GITHUB_BRANCH}"
					if (env.SHA1) {
						currentBuild.description = env.SHA1
					}
				}
			}
		}

		stage('Clone') {
			options { retry(2) }
			steps {
				dir('ci') {
					git url: 'https://github.com/traeak/trafficserver-ci',
						branch: 'full_pipeline'
				}
				dir('src') {
					script {
						String branch = env.SHA1
						if (! branch) {
							branch = '*/' + env.GITHUB_BRANCH
						}
						checkout([$class: 'GitSCM',
							branches: [[name: branch]],
							userRemoteConfigs: [[url: env.GITHUB_URL]]])
					}
				}

				echo 'Finished Cloning'
			}
		}
		stage('Build') {
			steps {
				echo 'Starting build'
				dir('src') {
					sh '''
					source /opt/rh/gcc-toolset-9/enable
					update-crypto-policies --set LEGACY

					# Change permissions so that all files are readable
					# (default user umask may change and make these unreadable)
					chmod -R o+r .
					autoreconf -fiv
					./configure --enable-experimental-plugins --enable-example-plugins --prefix=/tmp/ats --enable-werror --enable-debug --enable-wccp --enable-luajit --enable-ccache
					make -j4
					make install
					'''
				}
			}
		}

		stage('AuTest') {
			steps {
				echo 'Starting AuTest'
				dir('src/tests') {
					sh '''
						set +e
						mkdir -p ${WORKSPACE}/output/${GITHUB_BRANC}
						./autest.sh --ats-bin /tmp/ats/bin/ --sandbox /tmp/sandbox || true
						if [ -n "$(ls -A /tmp/sandbox/)" ]; then
							cp -rf /tmp/sandbox/ ${WORKSPACE}/output/${GITHUB_BRANC}/
							chmod -R 777 ${WORKSPACE}
							exit 1
						else
							touch ${WORKSPACE}/output/${GITHUB_BRANC}/No_autest_failures
							chmod -R 777 ${WORKSPACE}
							exit 0
						fi
						'''
				}
			}
		}
	}

	post {
		always {
			archiveArtifacts artifacts: 'output/**/*', fingerprint: false, allowEmptyArchive: true
		}
		cleanup {
			cleanWs()
		}
	}
}
