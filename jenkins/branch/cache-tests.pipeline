pipeline {
	agent none

	environment {
		CCACHE_DIR = "/tmp/ccache"
	}

	stages {
		stage('Test') {

			agent {
				docker {
					registryUrl 'https://ci.trafficserver.apache.org/'
					image 'ci.trafficserver.apache.org/ats/cache-tests'
					args '--user root --init --cap-add=SYS_PTRACE --network=host -v ${HOME}/ccache:/tmp/ccache:rw'
					label 'branch'
				}
			}

			steps {
				script {
					if (! env.GITHUB_BRANCH) {
						def bparts = env.JOB_NAME.split('/')
						if (2 != bparts.length) {
							error("Invalid branch name from ${JOB_NAME}")
						}
						env.GITHUB_BRANCH = bparts[0]
					}
					currentBuild.displayName = "#${BUILD_NUMBER} ${GITHUB_BRANCH}"
					if (env.SHA1) {
						currentBuild.description = env.SHA1
					}
					sh 'printenv'
				}

				echo "Checking out and building basic ATS"
				dir('src') {
					script {
						String branch = env.SHA1
						if (! branch) {
							branch = '*/' + env.GITHUB_BRANCH
						}

						timeout(time: 1, unit: 'MINUTES') {
							retry(3) {
								checkout([$class: 'GitSCM',
									branches: [[name: branch]],
									userRemoteConfigs: [[url: env.GITHUB_URL]],
									extensions: [[$class: 'CloneOption', timeout: 10]]
								])
							}
						}

						sh '''
							chmod -R o+r .
							autoreconf -fiv
							./configure --prefix=/opt/ats --enable-ccache
							make -j`nproc` install
							echo 'map / https://ci.trafficserver.apache.org/cache-tests/' >> \
								/opt/ats/etc/trafficserver/remap.config
						'''
					}
				}

				echo "Running npm test"
				dir('src') {
					script {
						sh '''
							cd /cache-tests
							mkdir -p ${WORKSPACE}/output
							/opt/ats/bin/traffic_manager &
							sleep 2
							npm run --silent cli --base=http://localhost:8080/ > ${WORKSPACE}/output/ats-${GITHUB_BRANCH}.json
							chmod 644 ${WORKSPACE}/output/ats-${GITHUB_BRANCH}.json
							chown -R 1200:1200 ${WORKSPACE}/output
						'''
					}
				}

				echo "Stashing"
				dir('output') {
					stash includes: '*.json', name: "results"
				}
			}
			post {
				always {
					sh '''
					chown -R 1200:1200 ${WORKSPACE}/src
					'''
					cleanWs()
				}
			}
		}

		stage('Publish') {
			agent { label 'controller' }
			steps {
				echo "Installing"
				script {
					echo "Unstashing"
					unstash 'results'
					sh '''
						cp -avx ats-${GITHUB_BRANCH}.json /opt/cache-tests/cache-tests/results/
					'''
				}
			}
			post {
				always {
					
					cleanWs()
				}
			}
		}
	}
}
