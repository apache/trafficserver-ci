pipeline {
	agent {
		docker {
			registryUrl 'https://controller.trafficserver.org/'
			image 'controller.trafficserver.org/ats/cache-tests-build:latest'
			args '--user root --init --cap-add=SYS_PTRACE --network=host -v ${HOME}/ccache:/tmp/ccache:rw'
			label 'branch'
		}
	}
	environment {
		CCACHE_DIR = "/tmp/ccache"
	}

	stages {
		stage('Initialization') {
			steps {
				script {
					currentBuild.displayName = "#${BUILD_NUMBER} ${GITHUB_BRANCH}"
					if (env.SHA1) {
						currentBuild.description = env.SHA1
					}
				}
			}
		}

		stage('Clone') {
			steps {
				dir('ci') {
					git url: 'https://github.com/apache/trafficserver-ci',
						branch: 'main'
				}
				dir('src') {
					script {
						String branch = env.SHA1
						if (! branch) {
							branch = '*/' + env.GITHUB_BRANCH
						}

						try {
							checkout([$class: 'GitSCM',
								branches: [[name: branch]],
								userRemoteConfigs: [[url: env.GITHUB_URL]],
								extensions: [[$class: 'CloneOption', timeout: 10]]
							])
						} catch (error) {
							echo "Clone failed, retry"
							retry(2) {
								checkout([$class: 'GitSCM',
									branches: [[name: branch]],
									userRemoteConfigs: [[url: env.GITHUB_URL]],
									extensions: [[$class: 'CloneOption', timeout: 10]]
								])
							}
						}
					}
				}

				echo 'Finished Cloning'
			}
		}
		stage('Build') {
			steps {
				echo 'Starting build'
				dir('src') {
					sh '''
					chmod -R o+r .
					autoreconf -fiv
					./configure --prefix=/opt/ats --enable-ccache
					make -j4
					make install
                   			echo 'map / https://jenkins.trafficserver.org/cache-tests/' >> /opt/ats/etc/trafficserver/remap.config
					'''
				}
			}
		}

		stage('Cache-Tests') {
			steps {
				echo 'Starting Cache-Tests'
				dir('src') {
					sh '''
					cd /cache-tests
                    			/opt/ats/bin/traffic_manager &
                    			cat /opt/ats/etc/trafficserver/remap.config
                    			sleep 2
                    			npm run --silent cli --base=http://localhost:8080/ > ${WORKSPACE}/output/${GITHUB_BRANCH}.json
					ls ${WORKSPACE}/output
					'''
				}
			}
		}
	}

	post {
		always {
			archiveArtifacts artifacts: 'output/**/*', fingerprint: false, allowEmptyArchive: true
		}
		cleanup {
			cleanWs()
		}
	}
}
