pipeline {
	agent none

	stages {
		stage('Build') {
			agent {
				docker {
					image 'ci.trafficserver.apache.org/ats/rockylinux:8'
					registryUrl 'https://ci.trafficserver.apache.org/'
					args '--network=host'
					label 'branch'
				}
			}
			steps {
				script {
					if (! env.GITHUB_BRANCH) {
						def bparts = env.JOB_NAME.split('/')
						if (2 != bparts.length) {
							error("Invalid branch name from ${JOB_NAME}")
						}
						env.GITHUB_BRANCH = bparts[0]
					}
					currentBuild.displayName = "#${BUILD_NUMBER} ${GITHUB_BRANCH}"
					if (env.SHA1) {
						currentBuild.description = env.SHA1
					}
					sh 'printenv'
				}

				dir('ci') {
					git url: 'https://github.com/apache/trafficserver-ci',
						branch: 'main'
				}

				dir('src') {
					script {
						String branch = env.SHA1
						if (! branch) {
							branch = '*/' + env.GITHUB_BRANCH
						}

						timeout(time: 1, unit: 'MINUTES') {
							retry(3) {
								checkout([$class: 'GitSCM',
									branches: [[name: branch]],
									userRemoteConfigs: [[url: env.GITHUB_URL]],
									extensions: [[$class: 'CloneOption', timeout: 10]]
								])
							}
						}
					}
				}
				echo 'Finished Cloning'

				echo 'Starting build'
				dir('src') {
					// For Jenkins debugging. We comit to the top of README in our debug PRs.
					sh '''
                                        set -x
					head README
					source ../ci/jenkins/bin/environment.sh
					bash -x ../ci/jenkins/bin/docs.sh
					'''
				}

				echo "Stashing"
				dir('src/output') {
					script {
						if (env.PUBLISH_DOCS == "true") {
							echo 'stashing docs'
							stash includes: 'en/**,ja/**', name: "docs"
						}
					}
				}
			}
			post {
				always {
					archiveArtifacts artifacts: "src/output/**/*", fingerprint: false, allowEmptyArchive: true
					publishHTML (target : [
						allowMissing: true,
						alwaysLinkToLastBuild: false,
						keepAll: true,
						reportDir: "src/output/en/${GITHUB_BRANCH}/",
						reportFiles: 'index.html',
						reportName: "Sphinx Docs"])

					sh'''
						echo
						echo "See the job's Build artifacts and click on index.html for the rendered docs."
						echo
					'''

					cleanWs()
				}
			}
		}

		stage('Install') {
			when {
				environment name: 'PUBLISH_DOCS', value: 'true'
			}
			agent { label 'controller' }
			steps {
				echo "Installing"
				script {
					if (env.PUBLISH_DOCS == "true" && env.GITHUB_BRANCH != "") {
						echo "unstashing"
						unstash 'docs'
						sh '''
						cp -avx ja /home/docs
						cp -avx en /home/docs
						/home/docs/docs_purge.sh ${GITHUB_BRANCH}
						'''
					}
				}
			}
			post {
				always {
					cleanWs()
				}
			}
		}
	}
}
