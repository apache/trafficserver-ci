pipeline {
	agent {
		docker {
			image 'controller.trafficserver.org/ats/centos:8'
			registryUrl 'https://controller.trafficserver.org/'
			args '--network=host -v "/home/docs:/tmp/docs:rw"'
			label 'docs'
		}
	}

	stages {
		stage('Initialization') {
			steps {
				script {
					if (! env.GITHUB_BRANCH) {
						def bparts = env.JOB_NAME.split('/')
						if (2 != bparts.length) {
							error("Invalid branch name from ${JOB_NAME}")
						}
						env.GITHUB_BRANCH = bparts[0]
					}
					currentBuild.displayName = "#${BUILD_NUMBER} ${GITHUB_BRANCH}"
					if (env.SHA1) {
						currentBuild.description = env.SHA1
					}
					sh 'printenv'
				}
			}
		}
		stage('Clone') {
			steps {
				dir('ci') {
					git url: 'https://github.com/apache/trafficserver-ci',
						branch: 'main'
				}
				dir('src') {
					script {
						String branch = env.SHA1
						if (! branch) {
							branch = '*/' + env.GITHUB_BRANCH
						}
						try {
							checkout([$class: 'GitSCM',
								branches: [[name: branch]],
								userRemoteConfigs: [[url: env.GITHUB_URL]],
								extensions: [[$class: 'CloneOption', timeout: 10]]
							])
						} catch (error) {
							echo "Clone failed, retry"
							retry(2) {
								checkout([$class: 'GitSCM',
									branches: [[name: branch]],
									userRemoteConfigs: [[url: env.GITHUB_URL]],
									extensions: [[$class: 'CloneOption', timeout: 10]]
								])
							}
						}
					}
				}
				echo 'Finished Cloning'
			}
		}
		stage('Build') {
			steps {
				echo 'Starting build'
				dir('src') {
					// For Jenkins debugging. We comit to the top of README in our debug PRs.
					sh '''
					head README
					source ../ci/jenkins/bin/environment.sh
					bash -x ../ci/jenkins/bin/docs.sh
					'''
				}
			}
		}
	}
	post {
		success {
//			archiveArtifacts artifacts: "src/output/${GITHUB_BRANCH}/**/*", fingerprint: false, allowEmptyArchive: true
			archiveArtifacts artifacts: "src/output/**/*", fingerprint: false, allowEmptyArchive: true
			publishHTML (target : [
				allowMissing: true,
				alwaysLinkToLastBuild: false,
				keepAll: true,
				reportDir: "src/output/en/${GITHUB_BRANCH}/",
				reportFiles: 'index.html',
				reportName: "Sphinx Docs"])

			sh'''
				echo
				echo "See the job's Build artifacts and click on index.html for the rendered docs."
				echo
				'''
		}
		cleanup {
			cleanWs()
		}
	}
}
