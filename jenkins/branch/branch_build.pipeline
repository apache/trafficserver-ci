DUMMY = false

def isBuildable(String jobpath) {
	return Jenkins.instance.getItemByFullName(jobpath) &&
			Jenkins.instance.getItemByFullName(jobpath).isBuildable()
}

def doParallelBuilds() {

	def jobpaths = []

	def osprefix = env.JOB_DIR + '/os-'

	// Detect buildable os- jobs in branch folder
	// This comes back with folder/name
	// buildJob wants /folder/name
	Jenkins.instance.getAllItems(Job.class).each {
		if (it.class == org.jenkinsci.plugins.workflow.job.WorkflowJob && it.isBuildable()) {
			def jobpath = it.fullName
			if (jobpath.startsWith(osprefix)) {
				jobpaths.add(jobpath)
			}
		}
	}

	def builders = [:]
	def prefix = env.JOB_DIR + '/'

	for (job in jobpaths) {
		def jobpath = job
		def name = jobpath.substring(prefix.size())
		echo "Adding ${jobpath} as ${name}"
		builders[name] = {
			stage(name) {
				echo jobpath
				script {
					result = buildJob(jobpath, name)
					if (result == 'FAILURE') {
						error("${name} build failed")
					}
				}
			}
		}
	}

	String jobstr = "osx freebsd"
	def extrajobs = jobstr.split(" ")

	for (job in extrajobs) {
		def name = job
		def jobpath = prefix + name
		echo "Adding ${jobpath} as ${name}"
		if (isBuildable(jobpath)) {
			builders[name] = {
				stage(name) {
					echo jobpath
					script {
						result = buildJob(jobpath, name)
						if (result == 'FAILURE') {
							error("${name} build failed")
						}
					}
				}
			}
		}
	}

	parallel builders
}

// jobpath is relative or absolute path to job, jobname is display name
String buildJob(String jobpath, String jobname) {
	echo "Build of: ${jobname} as ${jobpath}"
	if (DUMMY) { jobpath = "Branch_Builds/dummy" }
	def jobBuild = build(job: '/' + jobpath, propagate: false,
		parameters: [
			string(name: 'GITHUB_URL', value: GITHUB_URL),
			string(name: 'GITHUB_BRANCH', value: GITHUB_BRANCH),
			string(name: 'JOB_DIR', value: JOB_DIR),
			string(name: 'SHA1', value: SHA1),
		]
	)
	def result = jobBuild.getResult()
	echo "Build of " + jobname + " returned result: " + result
	if ('FAILURE' == result) { error("${jobname} failed") }
	return result
}

String autestJob(String jobpath, String jobname, String shard) {
	echo "Autest Build of: " + jobname + " " + shard
	if (DUMMY) { jobpath = "Branch_Builds/dummy" }
	def jobBuild = build(job: '/' + jobpath, propagate: false,
		parameters: [
			string(name: 'GITHUB_URL', value: GITHUB_URL),
			string(name: 'GITHUB_BRANCH', value: GITHUB_BRANCH),
			string(name: 'JOB_DIR', value: JOB_DIR),
			string(name: 'SHA1', value: SHA1),
			string(name: 'AUTEST_SHARD', value: shard),
		]
	)
	def result = jobBuild.getResult()
	echo "Build of " + jobname + " returned result: " + result
	if ('FAILURE' == result) { error("${jobname} failed") }
	return result
}

def shaForBranch(url, branch) {
	sha1 = sh (
		script: "set -- `git ls-remote -h $url refs/heads/$branch`; echo \${1}",
		returnStdout: true
	).trim()
	return sha1
}

pipeline {
	agent none

	stages {
		stage('Initialization') {
			agent { label 'master' }
			steps {
				script {
					if (! env.AUTEST_SHARDS) {
						env.AUTEST_SHARDS = 4
					}
					if (! env.JOB_DIR) {
						def bparts = env.JOB_NAME.split('/')
						bparts = bparts - bparts.last()
						env.JOB_DIR = bparts.join('/')
					}

					if (! env.GITHUB_BRANCH) {
						def bparts = env.JOB_NAME.split('/')
						if (2 != bparts.length) {
							error("Invalid branch name from ${JOB_NAME}")
						}
						env.GITHUB_BRANCH = bparts[0]
					}
					currentBuild.displayName = "#${BUILD_NUMBER} ${GITHUB_BRANCH}"
					if (! env.SHA1) {
						env.SHA1 = shaForBranch(env.GITHUB_URL, env.GITHUB_BRANCH)
					}
					currentBuild.displayName = "#${BUILD_NUMBER} ${GITHUB_BRANCH}"
					currentBuild.description = env.SHA1

					sh 'printenv'

				}
			}
		}

		stage('Validation') {
			parallel {
				stage('In Tree') {
					steps {
						script {
							echo "in_tree"
							buildJob(env.JOB_DIR + '/in_tree', 'in_tree')
						}
					}
				}
				stage('Out Of Tree') {
					steps {
						script {
							echo "out_of_tree"
							buildJob(env.JOB_DIR + '/out_of_tree', 'out_of_tree')
						}
					}
				}
				stage('RAT') {
					steps {
						script {
							echo "rat"
							buildJob(env.JOB_DIR + '/rat', 'rat')
						}
					}
				}
				stage('clang format') {
					steps {
						script {
							echo "clang_format"
							buildJob(env.JOB_DIR + '/clang_format', 'clang_format')
						}
					}
				}
			}
		}

		stage('Snapshot') {
			steps {
				script {
					echo "Skipping snapshot"
					//buildJob(env.JOB_DIR + '/snapshot', 'snapshot')
				}
			}
		}

		stage('OS Builds') {
			steps {
				script {
				  catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
					  doParallelBuilds()
					}
				}
			}
		}

		stage('Verification') {
			parallel {
				stage('clang analyzer') {
					steps {
						script {
							echo "clang_analyzer"
							buildJob(env.JOB_DIR + '/clang_analyzer', 'clang_analyzer')
						}
					}
				}
				stage('autests') {
					steps {
						script {
							echo "autests"
							String jobpath = env.JOB_DIR + '/autest'
							if (env.AUTEST_SHARDS) {
								def nshards = env.AUTEST_SHARDS as int
								def jobs = [:]
								for (ind = 0 ; ind < nshards ; ind++) {
									index = ind
									String shard = index + "of" + env.AUTEST_SHARDS
									jobs[shard] = { autestJob(jobpath, 'autest', shard) }
								}
								parallel jobs
							} else {
								buildJob(jobpath, 'autest')
							}
						}
					}
				}
				stage('docs') {
					steps {
						script {
							echo "docs"
							buildJob(env.JOB_DIR + '/docs', 'docs')
						}
					}
				}
				stage('cache_tests') {
					steps {
						script {
							echo "cache_tests"
							buildJob(env.JOB_DIR + '/cache-tests', 'cache_tests')
						}
					}
				}
				stage('coverage') {
					steps {
						script {
							echo "coverage"
							String jobpath = env.JOB_DIR + '/coverage'
							if (isBuildable(jobpath)) {
							  buildJob(jobpath, 'coverage')
							}
						}
					}
				}
			}
		}
	}
}
