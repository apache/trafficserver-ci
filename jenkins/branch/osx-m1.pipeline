pipeline {
	agent {label 'osx-m1'}
	stages {
		stage('Clone') {
			steps {
				dir('src') {
					script {
						String branch = env.SHA1
						if (! branch) {
							branch = '*/' + env.GITHUB_BRANCH
						}

						checkout([$class: 'GitSCM',
							branches: [[name: branch]],
							userRemoteConfigs: [[url: env.GITHUB_URL]],
							extensions: [[$class: 'CloneOption', timeout: 10]],
						])
				  }
				}
				echo 'Finished Cloning'
			}
		}
		stage('Build') {
			steps {
				echo 'Starting build'
				dir('src') {
					sh '''#!/bin/bash
						set -x
						set -e

						if [ -d cmake ]
						then
							export CC="clang"
              export CXX="clang++"
              export CXXFLAGS="-Qunused-arguments"
              export WITH_LIBCPLUSPLUS="yes"
              cmake -B build \
								-G "Unix Makefiles" \
        				-DCMAKE_BUILD_TYPE=Debug \
        				-DCMAKE_INSTALL_PREFIX=/tmp/ats" \
        				-DENABLE_CCACHE=ON" \
        				-DBUILD_EXPERIMENTAL_PLUGINS=ON" \
        				-DBUILD_REGRESSION_TESTING=ON" \
        				-DENABLE_EXAMPLE=ON \
								-DOPENSSL_ROOT_DIR=/usr/local/opt/openssl
              cmake --build build -j3 -v
						else
							autoreconf -fiv
							export CC="clang"
							export CXX="clang++"
							export CXXFLAGS="-Qunused-arguments"
							export WITH_LIBCPLUSPLUS="yes"
							./configure \
								--enable-experimental-plugins \
								--with-openssl=/usr/local/opt/openssl
							make -j3
						fi
					'''
				}
			}
		}
	}
	
	post { 
		cleanup { 
			cleanWs()
		}
	}
}
