pipeline {
	agent {
		docker {
			registryUrl 'https://ci.trafficserver.apache.org/'
			image 'ci.trafficserver.apache.org/ats/rockylinux:8'
			args '--init --cap-add=SYS_PTRACE --network=host -v ${HOME}/ccache:/tmp/ccache:rw'
			label 'branch'
		}
	}
	environment {
		CCACHE_DIR = "/tmp/ccache"
	}

	stages {
		stage('Initialization') {
			steps {
				script {
					if (! env.GITHUB_BRANCH) {
						def bparts = env.JOB_NAME.split('/')
						if (2 != bparts.length) {
							error("Invalid branch name from ${JOB_NAME}")
						}
						env.GITHUB_BRANCH = bparts[0]
					}
					currentBuild.displayName = "#${BUILD_NUMBER} ${GITHUB_BRANCH}"
					if (env.SHA1) {
						currentBuild.description = env.SHA1
					}
					sh 'printenv'
				}
			}
		}

		stage('Clone') {
			steps {
				dir('ci') {
					git url: 'https://github.com/apache/trafficserver-ci',
						branch: 'main'
				}
				dir('src') {
					script {
						String branch = env.SHA1
						if (! branch) {
							branch = '*/' + env.GITHUB_BRANCH
						}

						timeout(time: 1, unit: 'MINUTES') {
							retry(3) {
								checkout([$class: 'GitSCM',
									branches: [[name: branch]],
									userRemoteConfigs: [[url: env.GITHUB_URL]],
									extensions: [[$class: 'CloneOption', timeout: 10]]
								])
							}
						}
					}

					echo 'Finished Cloning'
				}
			}
		}

		stage('Build') {
			steps {
				echo 'Starting build'
				dir('src') {
					sh '''#!/bin/bash
						set -x
						set -e

						source /opt/rh/gcc-toolset-11/enable
						sudo update-crypto-policies --set LEGACY

						# We want to pick up the OpenSSL-QUIC version
						# of curl in /opt/bin. The HTTP/3 AuTests depend
						# upon this, so update the PATH accordingly.
						export PATH=/opt/bin:${PATH}

						# Change permissions so that all files are readable
						# (default user umask may change and make these unreadable)
						sudo chmod -R o+r .

						if [ -d cmake ]
						then
							echo "Building with CMake"	

							presetpath="../ci/jenkins/branch/CMakePresets.json"
              [ -f "${presetpath}" ] && /bin/cp -f "${presetpath}" .

							cmake -B build --preset branch-coverage -DCMAKE_INSTALL_PREFIX="/tmp/ats"
							cmake --build build -j`nproc` -v
							cmake --install build -v

						else
							echo "Building with autotools"

							autoreconf -fiv
							./configure \
								--enable-experimental-plugins \
								--enable-example-plugins \
								--prefix=/tmp/ats \
								--enable-werror \
								--enable-debug \
								--enable-wccp \
								--enable-luajit \
								--enable-ccache \
								--enable-coverage
							make -j`nproc` V=1 Q=
							make install
						fi
					'''
				}
			}
		}

		stage('Initialize Coverage') {
			steps {
				echo 'Initializing lcov'
				dir('src') {
					sh '''#!/bin/bash
						set -x
						set -e
						source /opt/rh/gcc-toolset-11/enable

						# Create a base tracefile before the tests are run.
						lcov \
							--directory . \
							--no-external \
							--capture \
							--initial \
							--output-file /tmp/lcov_tracefile_base.info
					'''
				}
			}
		}
		stage('Test') {
			steps {
				echo 'Starting Unit (Catch) Tests'
				dir('src') {
					sh '''#!/bin/bash
						set -x
						set -e
						NPROC=$(nproc)
						[ "${RUN_UNIT_TESTS}" == "true" ] || exit 0
						source /opt/rh/gcc-toolset-11/enable

						if [ -d cmake ]
						then
							pushd build
							ctest -B build -j${NRPOC} \
								--output-on-failure \
								--no-compress-output \
								-T test
							popd
						else
							make -j${NPROC} check
						fi
					'''
				}
				echo 'Starting the regression tests'
				dir('src') {
					sh '''#!/bin/bash
						set -x
						set -e
						[ "${RUN_REGRESSION_TESTS}" == "true" ] || exit 0
						chmod -R go+w .
						chmod -R go+w /tmp/ats/
						/tmp/ats/bin/traffic_server -K -k -R 1
					 '''
				}
				echo 'Starting AuTest'
				dir('src/tests') {
					sh '''#!/bin/bash
						set -x
						set -e
						[ "${RUN_AUTEST}" == "true" ] || exit 0

						# We want to pick up the OpenSSL-QUIC version of curl in /opt/bin.
						# The HTTP/3 AuTests depend upon this, so update the PATH accordingly.
						export PATH=/opt/bin:${PATH}
						export PATH=/opt/go/bin:${PATH}

						autest_args=""
						if [ -d ../cmake ]
						then
							cd ../build/tests
							pipenv install
						else
							autest_args="--ats-bin /tmp/ats/bin/ --sandbox /tmp/sandbox"
						fi

						./autest.sh ${autest_args}
						'''
				}
			}
		}
		stage('Coverage') {
			steps {
				echo 'Generating a coverage report'
				dir('src') {
					sh '''#!/bin/bash
						set -x
						set -e
						source /opt/rh/gcc-toolset-11/enable

						# Use `.` for --directory, not `pwd`. For some reason that seems
						# important. It makes header files processed better.
						lcov \
							--directory . \
							--capture \
							--output-file /tmp/lcov_tracefile_test.info

						# Combine with the base tracefile.
						lcov \
							--add-tracefile /tmp/lcov_tracefile_base.info \
							--add-tracefile /tmp/lcov_tracefile_test.info \
							--output-file /tmp/lcov_tracefile_total.info

						# Filter out system and other unwanted files.
						lcov \
							--remove /tmp/lcov_tracefile_total.info \
								'/opt/*' \
								'/usr/*' \
								'*/TestBox.h' \
								'*/lib/yamlcpp/*' \
								'*/test/*' \
								'*/test_*' \
								'*/tests/*' \
								'*/unit-tests/*' \
								'*/unit_tests/*' \
							--output /tmp/lcov_tracefile_filtered.info

						git_commit="$(git log -n1 --oneline)"
						genhtml \
							--title "${git_commit}" \
							--output-directory /tmp/lcov-report \
							/tmp/lcov_tracefile_filtered.info

						cp -rf /tmp/lcov-report ${WORKSPACE}/output/
						chmod -R 777 ${WORKSPACE}
					'''
				}
			}
		}
	}

	post {
		always {
			archiveArtifacts artifacts: 'output/**/*', fingerprint: false, allowEmptyArchive: true
		}
		cleanup {
			cleanWs()
		}
	}
}
