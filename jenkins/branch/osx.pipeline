pipeline {
	agent {label 'osx'}
	stages {
		stage('Clone') {
			steps {
				echo 'Starting Clone'
				dir('ci') {
					git url: 'https://github.com/apache/trafficserver-ci',
						branch: 'main'
				}
				dir('src') {
					script {
						String branch = env.SHA1
						if (! branch) {
							branch = '*/' + env.GITHUB_BRANCH
						}

						checkout([$class: 'GitSCM',
							branches: [[name: branch]],
							userRemoteConfigs: [[url: env.GITHUB_URL]],
							extensions: [[$class: 'CloneOption', timeout: 10]],
						])
				  }
				}
				echo 'Finished Cloning'
			}
		}
		stage('Build') {
			steps {
				echo 'Starting build'
				dir('src') {
					sh '''#!/bin/bash
						set -x
						set -e

						NPROC=3

						if [ -d cmake ]
						then
							echo "Building with CMake"

							presetpath="../ci/jenkins/branch/CMakePresets.json"
							[ -f "${presetpath}" ] && cp -f "${presetpath}" .

							CC="clang" \
								CXX="clang++" \
								CXXFLAGS="-Qunused-arguments" \
								WITH_LIBCPLUSPLUS="yes" \
								cmake -B build --preset branch-osx
							cmake --build build -j${NPROC} -v
						else
							echo "Building with autotools"

							autoreconf -fiv
							CC="clang" \
								CXX="clang++" \
								CXXFLAGS="-Qunused-arguments" \
								WITH_LIBCPLUSPLUS="yes" \
								./configure \
								--enable-experimental-plugins \
								--with-openssl=/usr/local/opt/openssl
							make -j${NPROC}
						fi
					'''
				}
			}
		}
	}
	
	post { 
		cleanup { 
			cleanWs()
		}
	}
}
